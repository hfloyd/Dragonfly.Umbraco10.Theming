@inject ThemeHelperService ThemeHelper
@model dynamic

@try
{
	var themeName = ViewBag.CurrentThemeName;
	string editor = EditorView(Model, themeName, ThemeHelper);
	<text>@await Html.PartialAsync(editor, Model as object)</text>
}
catch (Exception ex)
{
	<pre>@ex.ToString()</pre>
}

@functions {
	public static string EditorView(dynamic contentItem, string ThemeName, ThemeHelperService ThemeHelper)
	{
		//Support Theming of Widgets

		//Standard view path
		string view = contentItem.editor.render != null ? contentItem.editor.render.ToString() : contentItem.editor.view.ToString();
		view = view.Replace(".html", ".cshtml");

		if (!view.Contains("/"))
		{
			view = "grid/editors/" + view;
		}

		//Check for themed grid editor file
		if (ThemeName != "")
		{
			string viewFileName = view.Replace(".cshtml", "");

			string finalViewPath = ThemeHelper.GetFinalThemePath(ThemeName, Theming.PathType.GridEditor, viewFileName, view);

			view = finalViewPath;
		}

		return view;
	}

}